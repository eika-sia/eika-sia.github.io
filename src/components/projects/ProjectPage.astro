---
import { type CollectionEntry } from "astro:content";

// Locally extend the collection entry type with the runtime render() that exists on markdown entries.
type RenderableProject = CollectionEntry<'projects'> & { render: () => Promise<{ Content: any }> };

const project = (Astro.props as { project: RenderableProject }).project;
if (!project) {
  throw new Error("ProjectPage: missing 'project' prop");
}
const { Content, headings } = await (project as any).render();
const rawHeadings = (headings || []) as any[];
const duplicateTitleHeading = rawHeadings[0] && rawHeadings[0].depth === 1 && rawHeadings[0].text?.trim() === project.data.title?.trim();
---

<article class="mx-auto px-5 md:px-8 lg:px-10 content-visibility-auto {duplicateTitleHeading ? 'duplicate-heading-hidden' : ''}" style="max-width:clamp(680px,72ch,960px);">
  <!-- Back to Projects Link -->
  <div class="mb-6">
    <a
      href="/projects"
      class="text-violet-400 hover:text-violet-300 transition-colors text-sm"
    >
      ← Back to Projects
    </a>
  </div>

  <h1 class="text-3xl md:text-4xl font-semibold mb-4 md:mb-6 text-slate-100 tracking-tight leading-tight">
    {project.data.title}
  </h1>
  <div class="mb-8 md:mb-10 space-y-4">
    <div class="text-slate-400 text-[11px] md:text-[12px] mono flex flex-wrap gap-y-1 gap-x-3 items-center leading-relaxed">
      {project.data.date && <span class="text-violet-300/90">{new Date(project.data.date).toLocaleDateString()}</span>}
      {project.data.status && <span class="text-cyan-400">• {project.data.status.toUpperCase()}</span>}
      {project.data.collaborators && project.data.collaborators.length > 0 && (
        <span class="flex flex-wrap gap-1.5 md:gap-2 items-center">
          <span class="hidden md:inline text-slate-600">•</span>
          {project.data.collaborators.map((c: string) => (
            <span class="px-2 py-0.5 rounded bg-slate-800/60 text-violet-200 text-[10px] md:text-[11px] tracking-wide">{c}</span>
          ))}
        </span>
      )}
      {project.data.tags && project.data.tags.length > 0 && (
        <span class="flex flex-wrap gap-1.5 md:gap-2 items-center">
          <span class="hidden md:inline text-slate-600">•</span>
          {project.data.tags.map((tag: string) => (
            <span class="px-2 py-0.5 rounded bg-slate-800/60 text-violet-300 text-[10px] md:text-[11px] tracking-wide">#{tag}</span>
          ))}
        </span>
      )}
    </div>
    <!-- TOC removed -->
  </div>
  <div class="min-w-0 md-article prose prose-invert max-w-none">
    <Content />
  </div>
</article>

<style>
.md-article pre { @apply border bg-slate-900/80 rounded-lg shadow-md shadow-black/30; border-color: var(--border-color); }
.md-article code:not(pre code) { @apply bg-slate-800/70 px-1.5 py-0.5 rounded; }
.md-article .heading-anchor { @apply opacity-0 ml-2 text-violet-400 transition; }
.md-article h2:hover .heading-anchor, .md-article h3:hover .heading-anchor { @apply opacity-100; }
.md-article h2 { @apply mt-14 mb-4 text-2xl font-semibold tracking-tight; }
.md-article h3 { @apply mt-10 mb-3 text-xl font-semibold tracking-tight; }
.md-article h4 { @apply mt-8 mb-2 text-lg font-semibold tracking-tight; }
.md-article > p:first-of-type { @apply text-lg md:text-xl leading-relaxed text-slate-200; }
.md-article p { @apply leading-relaxed; }
.md-article a { @apply underline decoration-[var(--accent-soft)] decoration-2 underline-offset-2 hover:opacity-90 transition; }
.duplicate-heading-hidden .md-article h1:first-of-type { display: none; }
</style>
