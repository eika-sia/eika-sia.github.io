---
interface Props {
  title: string;
  description: string;
  tags: string[];
  variant?: 'glass' | 'solid';
}
const { title, description, tags = [], variant = 'glass' } = Astro.props as Props;

const baseClasses = 'group relative rounded-2xl transition-all p-7 md:p-8';
const glass = 'border border-[var(--accent-soft)]/15 bg-[rgba(18,22,32,0.38)] backdrop-blur-md hover:bg-[rgba(18,22,32,0.55)] hover:border-[var(--accent-soft)]/35 shadow-[0_0_0_1px_rgba(0,0,0,0.3),0_8px_28px_-12px_rgba(0,0,0,0.6)] hover:shadow-[0_0_0_1px_rgba(0,0,0,0.35),0_10px_36px_-10px_rgba(0,0,0,0.65)]';
const solid = 'border border-slate-600/30 bg-[var(--panel)] hover:border-[var(--accent-soft)]/40 hover:shadow-xl hover:shadow-[var(--accent-soft)]/10';
const wrapperClass = `${baseClasses} ${variant === 'solid' ? solid : glass}`;
---
<div class={wrapperClass}>
  <h3 class="font-semibold text-lg mb-3 text-slate-100 tracking-tight">{title}</h3>
  <p class="mb-5 text-slate-300 text-sm leading-relaxed">{description}</p>
  {tags.length > 0 && (
    <div class="mb-5 flex flex-wrap gap-2">
      {tags.map((tag: string) => (
        <span class="badge">{tag}</span>
      ))}
    </div>
  )}
  <div>
    <slot />
  </div>
</div>
