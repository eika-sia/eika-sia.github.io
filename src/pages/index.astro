---
import BaseLayout from '../layouts/BaseLayout.astro';
import SectionHeader from '../components/site/SectionHeader.astro';
import EducationTimeline from '../components/site/EducationTimeline.astro';
import CurrentProjects from '../components/projects/CurrentProjects.astro';
import PublicationsList from '../components/site/PublicationsList.astro';
import CtaButton from '../components/site/CtaButton.astro';
import { getCollection, type CollectionEntry } from "astro:content";
import { resolveSlug } from '../lib/slug';
import Card from '../components/site/Card.astro';

const blogPosts = await getCollection("blog");
const latestTwo = blogPosts
  .sort((a: CollectionEntry<'blog'>, b: CollectionEntry<'blog'>) => new Date(b.data.date).getTime() - new Date(a.data.date).getTime())
  .slice(0,2)
  .map(p => ({
    ...p,
    resolvedSlug: resolveSlug(p as any)
  }));
---

<BaseLayout>
  <div class="content-shell relaxed-stack">
  <!-- Hero Section -->
  <section class="pt-0 md:pt-0 pb-8 md:pb-9 text-center space-y-5 md:space-y-7">
    <div class="flex flex-col items-center gap-4">
      <div class="section-prompt section-prompt-hero" aria-label="hero command">
        <span class="prompt-symbol accent-soft mono" style="color: var(--accent-soft) !important;">$</span>
        <span class="prompt-text mono">whoami</span>
      </div>
  <h1 class="font-bold text-slate-100 leading-tight tracking-tight">Eikasia | Goran Ivančić</h1>
      <div class="text-xl md:text-2xl text-[var(--accent-soft)] min-h-[2.2rem] flex items-center justify-center">
        <span id="typewriter"></span>
        <span class="cursor-blink ml-1">▊</span>
      </div>
  <p class="text-base md:text-xl narrow-text mx-auto text-slate-300 leading-relaxed md:leading-loose tracking-wide">
        Exploring human cognition through computational neuroscience. Playing CTFs and learning operating systems on the side.
      </p>
      <div class="flex flex-wrap justify-center gap-4 md:gap-6 pt-2">
        <a href="mailto:goran.ivancic@fer.hr" class="badge text-[var(--accent-soft)] !text-xs px-5 py-3 flex items-center gap-2 hover:brightness-110 transition">
          goran.ivancic@fer.hr
        </a>
        <a href="/cv" class="badge text-[var(--accent-soft)] !text-xs px-5 py-3 flex items-center gap-2 hover:brightness-110 transition">
          CV
        </a>
      </div>
      <div class="text-xs md:text-sm text-slate-500 mono pt-2">
        Research interests: <span class="text-[var(--accent)]">Local neural dynamics • Computer architecture • Spatial cognition • Cryptography</span>
      </div>
    </div>
  <div class="header-accent-bar w-full"></div>
  </section>

  <!-- Current Projects (with inline CTA) -->
  <section class="relaxed-section max-w-6xl mx-auto pb-3 md:pb-4">
    <SectionHeader title="Current Research & Projects" command="head ~/projects/* | less" variant="bar" sub="Active technical & neuroscience initiatives." />
    <div class="first-card-gap">
      <CurrentProjects />
      <div class="pt-0 flex justify-center">
        <CtaButton href="/projects" label="See all projects" />
      </div>
    </div>
  </section>

  <!-- Latest Blog Preview (reuse Card component) -->
  <section class="relaxed-section max-w-5xl mx-auto">
    <SectionHeader title="Latest Notes" command="head ~/blog/* | less" variant="bar" sub="Recent writing & research reflections." />
    <div class="first-card-gap relaxed-stack">
  {latestTwo.map((post: any) => (
    <Card title={post.data.title} description={post.data.description} tags={post.data.tags}>
          <div class="text-xs text-slate-500 mb-4 mono flex items-center gap-3">
            <span class="text-[var(--accent-soft)]">{new Date(post.data.date).toLocaleDateString()}</span>
          </div>
          <div class="flex items-center justify-end pt-1">
  <a href={`/blog/${post.resolvedSlug}`} class="badge !text-[0.62rem] px-5 py-3 font-semibold tracking-wide hover:brightness-110 transition inline-flex items-center gap-2">
              Read Article →
            </a>
          </div>
    </Card>
  ))}
      <div class="pt-4 flex justify-center">
        <CtaButton href="/blog" label="View all posts" />
      </div>
    </div>
  </section>

  <!-- Education Timeline/Progress (moved below blog) -->
  <section class="relaxed-section max-w-4xl mx-auto">
    <SectionHeader title="Education" folder="learning" variant="bar" sub="Formal degree programs and academic progression." />
    <div class="first-card-gap space-y-8 md:space-y-10">
      <EducationTimeline />
    </div>
  </section>


  <!-- Publications -->
  <section class="relaxed-section max-w-5xl mx-auto">
    <SectionHeader title="Publications" folder="extras" variant="bar" />
    <div class="first-card-gap">
      <PublicationsList />
    </div>
  </section>
  </div>
</BaseLayout>

<style>
  @keyframes cursor-blink {
    0%, 50% { opacity: 1; }
    51%, 100% { opacity: 0; }
  }
  
  .cursor-blink {
    animation: cursor-blink 1s infinite;
  }
</style>

<script>
  interface TypewriterOptions {
    typeSpeed?: number;
    deleteSpeed?: number;
    pauseTime?: number;
    deleteDelay?: number;
  }

  class Typewriter {
    private element: HTMLElement;
    private roles: string[];
    private roleIndex: number = 0;
    private charIndex: number = 0;
    private isDeleting: boolean = false;
    private isPaused: boolean = false;
    private typeSpeed: number;
    private deleteSpeed: number;
    private pauseTime: number;
    private deleteDelay: number;
    
    constructor(element: HTMLElement, roles: string[], options: TypewriterOptions = {}) {
      this.element = element;
      this.roles = roles;
      
      // Timing options (in milliseconds)
      this.typeSpeed = options.typeSpeed || 120;
      this.deleteSpeed = options.deleteSpeed || 80;
      this.pauseTime = options.pauseTime || 2500;
      this.deleteDelay = options.deleteDelay || 1800;
      
      this.type();
    }
    
    private type(): void {
      const currentRole = this.roles[this.roleIndex];
      
      if (this.isPaused) {
        setTimeout(() => {
          this.isPaused = false;
          this.isDeleting = true;
          this.type();
        }, this.deleteDelay);
        return;
      }
      
      if (this.isDeleting) {
        // Remove characters
        this.element.textContent = currentRole.substring(0, this.charIndex - 1);
        this.charIndex--;
        
        if (this.charIndex === 0) {
          this.isDeleting = false;
          this.roleIndex = (this.roleIndex + 1) % this.roles.length;
        }
        
        setTimeout(() => this.type(), this.deleteSpeed);
      } else {
        // Add characters
        this.element.textContent = currentRole.substring(0, this.charIndex + 1);
        this.charIndex++;
        
        if (this.charIndex === currentRole.length) {
          this.isPaused = true;
        }
        
        setTimeout(() => this.type(), this.typeSpeed);
      }
    }
  }
  
  // Initialize the typewriter when the page loads
  document.addEventListener('DOMContentLoaded', () => {
    const typewriterElement = document.getElementById('typewriter');
    if (typewriterElement) {
      new Typewriter(typewriterElement, [
        'Neuroscientist',
        'CTF player', 
        'Psychologist',
        'Computer Engineer'
      ], {
        typeSpeed: 100,     // Slightly faster typing
        deleteSpeed: 60,    // Faster deletion
        pauseTime: 2500,    // Longer pause to read
        deleteDelay: 1800   // Delay before deleting
      });
    }
  });
</script>
