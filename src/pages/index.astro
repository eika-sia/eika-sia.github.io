---
import BaseLayout from '../layouts/BaseLayout.astro';
import SectionHeader from '../components/site/SectionHeader.astro';
import EducationTimeline from '../components/site/EducationTimeline.astro';
import ProjectHighlights from '../components/projects/ProjectHighlights.astro';
import CurrentProjects from '../components/projects/CurrentProjects.astro';
import Highlights from '../components/projects/Highlights.astro';
---

<BaseLayout>
  <!-- Hero Section -->
  <section class="py-20 text-center border-b border-violet-500/20 mb-16">
    <div class="mb-8">
      <span class="text-violet-400 text-lg mono">$</span>
      <span class="text-slate-400 ml-2 mono">whoami</span>
    </div>
    <h1 class="text-6xl font-bold mb-4 text-slate-100">Goran Ivanƒçiƒá</h1>
    <div class="text-2xl mb-8 text-violet-300 min-h-[2.5rem] flex items-center justify-center">
      <span id="typewriter" class=""></span>
      <span class="cursor-blink text-violet-400 ml-1">‚ñä</span>
    </div>
    <p class="text-lg mb-12 text-slate-300 max-w-2xl mx-auto leading-relaxed">
      Exploring the intersection of human cognition and technology through neuroscience research, 
      cybersecurity challenges, and psychological understanding. Currently pursuing dual degrees in 
      Computer Engineering and Applied Psychology.
    </p>
    <div class="flex justify-center gap-8 mb-12 text-sm">
      <a href="mailto:goran.ivancic@fer.hr" class="bg-slate-700/50 border border-violet-500/30 px-8 py-4 rounded-lg hover:border-violet-400/50 hover:bg-slate-600/50 transition-all">
        <span class="text-violet-400">‚úâ</span> goran.ivancic@fer.hr
      </a>
      <a href="/cv" class="bg-slate-700/50 border border-violet-500/30 px-8 py-4 rounded-lg hover:border-violet-400/50 hover:bg-slate-600/50 transition-all">
        <span class="text-violet-400">üìÑ</span> CV
      </a>
    </div>
    <div class="text-sm text-slate-500 mono">
      Research interests: <span class="text-violet-400">Local neural dynamics ‚Ä¢ Spatial cognition ‚Ä¢ Computer architecture ‚Ä¢ Cryptography</span>
    </div>
  </section>

  <!-- Education Timeline/Progress -->
  <section class="max-w-3xl mx-auto mb-20">
    <SectionHeader title="Education" />
    <EducationTimeline />
  </section>

  <!-- Current Projects -->
  <section class="max-w-5xl mx-auto mb-20">
    <SectionHeader title="Current Research & Projects" />
    <CurrentProjects />
  </section>

  <!-- Blog & Project Highlights -->
  <section class="max-w-5xl mx-auto mb-16">
    <SectionHeader title="Publications & Awards" />
    <Highlights />
  </section>
</BaseLayout>

<style>
  @keyframes cursor-blink {
    0%, 50% { opacity: 1; }
    51%, 100% { opacity: 0; }
  }
  
  .cursor-blink {
    animation: cursor-blink 1s infinite;
  }
</style>

<script>
  interface TypewriterOptions {
    typeSpeed?: number;
    deleteSpeed?: number;
    pauseTime?: number;
    deleteDelay?: number;
  }

  class Typewriter {
    private element: HTMLElement;
    private roles: string[];
    private roleIndex: number = 0;
    private charIndex: number = 0;
    private isDeleting: boolean = false;
    private isPaused: boolean = false;
    private typeSpeed: number;
    private deleteSpeed: number;
    private pauseTime: number;
    private deleteDelay: number;
    
    constructor(element: HTMLElement, roles: string[], options: TypewriterOptions = {}) {
      this.element = element;
      this.roles = roles;
      
      // Timing options (in milliseconds)
      this.typeSpeed = options.typeSpeed || 120;
      this.deleteSpeed = options.deleteSpeed || 80;
      this.pauseTime = options.pauseTime || 2500;
      this.deleteDelay = options.deleteDelay || 1800;
      
      this.type();
    }
    
    private type(): void {
      const currentRole = this.roles[this.roleIndex];
      
      if (this.isPaused) {
        setTimeout(() => {
          this.isPaused = false;
          this.isDeleting = true;
          this.type();
        }, this.deleteDelay);
        return;
      }
      
      if (this.isDeleting) {
        // Remove characters
        this.element.textContent = currentRole.substring(0, this.charIndex - 1);
        this.charIndex--;
        
        if (this.charIndex === 0) {
          this.isDeleting = false;
          this.roleIndex = (this.roleIndex + 1) % this.roles.length;
        }
        
        setTimeout(() => this.type(), this.deleteSpeed);
      } else {
        // Add characters
        this.element.textContent = currentRole.substring(0, this.charIndex + 1);
        this.charIndex++;
        
        if (this.charIndex === currentRole.length) {
          this.isPaused = true;
        }
        
        setTimeout(() => this.type(), this.typeSpeed);
      }
    }
  }
  
  // Initialize the typewriter when the page loads
  document.addEventListener('DOMContentLoaded', () => {
    const typewriterElement = document.getElementById('typewriter');
    if (typewriterElement) {
      new Typewriter(typewriterElement, [
        'neuroscientist',
        'CTF player', 
        'psychologist',
        'computer engineer'
      ], {
        typeSpeed: 100,     // Slightly faster typing
        deleteSpeed: 60,    // Faster deletion
        pauseTime: 2500,    // Longer pause to read
        deleteDelay: 1800   // Delay before deleting
      });
    }
  });
</script>
