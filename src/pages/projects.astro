---
import BaseLayout from '../layouts/BaseLayout.astro';
import { getCollection, type CollectionEntry } from "astro:content";
import { ensureUniqueSlugs, resolveSlug } from '../lib/slug';
import Card from '../components/site/Card.astro';
import TagDropdown from '../components/site/TagDropdown.astro';

const rawProjects = await getCollection("projects");
const uniq = ensureUniqueSlugs(rawProjects as any);
interface NormalizedProject {
  id: string;
  data: CollectionEntry<"projects">['data'];
  tags: string[];
  collaborators: string[];
  status?: string;
  category: string;
  categoryClasses: string;
}
// Sort by date (newest first) then map to normalized shape used in template
const sortedProjects: NormalizedProject[] = (uniq as any[])
  .sort((a: CollectionEntry<"projects">, b: CollectionEntry<"projects">) => new Date(b.data.date).getTime() - new Date(a.data.date).getTime())
  .map((p: CollectionEntry<"projects">) => {
    const tags: string[] = Array.isArray(p.data.tags) ? p.data.tags : [];
    const collaborators: string[] = Array.isArray(p.data.collaborators) ? p.data.collaborators : [];
    const status = p.data.status as string | undefined;
    const category = tags.includes('research') ? 'research' : (tags.includes('hardware') ? 'hardware' : 'project');
    const categoryClasses = category === 'research'
      ? 'bg-blue-500/20 text-blue-400 border border-blue-500/30'
      : category === 'hardware'
        ? 'bg-orange-500/20 text-orange-400 border border-orange-500/30'
        : 'bg-violet-500/20 text-violet-400 border border-violet-500/30';
  const finalSlug = resolveSlug(p as any);
  return { id: p.id, data: { ...p.data, slug: finalSlug } as any, tags, collaborators, status, category, categoryClasses };
  });

// Tag counts and frequency-sorted list
const tagCounts: Record<string, number> = {};
sortedProjects.forEach(p => p.tags.forEach(t => { tagCounts[t] = (tagCounts[t] || 0) + 1; }));
const allTags = Object.keys(tagCounts).sort((a,b) => tagCounts[b] - tagCounts[a] || a.localeCompare(b));
---

<BaseLayout>
  <div class="content-shell">
    <section class="relaxed-section max-w-6xl mx-auto">
  <header class="space-y-4 md:space-y-5 pb-2 md:pb-3">
        <h1 class="font-bold leading-tight tracking-tight text-slate-100 text-4xl md:text-5xl">Research Projects</h1>
        <p class="narrow-text text-base md:text-lg text-slate-300 leading-relaxed md:leading-loose">
          Exploring the intersection of neuroscience, computer engineering, and psychology through hands-on research and development projects.
        </p>
  <div class="header-accent-bar w-full"></div>
      </header>
  {allTags.length > 0 && (<TagDropdown id="projects-tagfilter" items={allTags.map(t => ({ value: t, count: tagCounts[t] }))} total={sortedProjects.length} targetSelector=".project-item" />)}
      <div class="first-card-gap relaxed-grid cols-2" id="project-grid">
        {sortedProjects.map((project: NormalizedProject) => (
          <Card title={project.data.title} description={project.data.description} tags={project.tags} data-tags={project.tags.join(',')} class="project-item">
            <div class="text-[12px] text-slate-400 mb-5 mono flex flex-wrap items-center gap-3 leading-relaxed">
              {project.status && <span class="text-[var(--accent-soft)] font-semibold tracking-wide text-[12px]">[{project.status.toUpperCase()}]</span>}
              <span class="text-slate-600">•</span>
              <span class="text-slate-300">{new Date(project.data.date).toLocaleDateString()}</span>
            </div>
            {project.collaborators.length > 0 && (
              <div class="text-[12px] text-slate-400/90 mb-7 tracking-wide leading-snug">
                <span class="text-[var(--accent-soft)] font-semibold">Collaborators:</span> {project.collaborators.join(", ")}
              </div>
            )}
            <div class="flex items-center justify-between pt-1">
              <span class={`px-2.5 py-1.5 rounded text-[11px] mono tracking-wide border font-medium shadow-[0_0_0_1px_rgba(77,83,201,0.12)] ${project.categoryClasses}`}>
                {project.category}
              </span>
              <a href={`/projects/${(project.data as any).slug}`} class="badge !text-[0.66rem] md:!text-[0.7rem] px-5 py-3 font-semibold tracking-wide hover:brightness-110 transition inline-flex items-center gap-2">
                View Details →
              </a>
            </div>
          </Card>
        ))}
      </div>
    </section>
  </div>
</BaseLayout>

<!-- Inline script & select styles removed; handled by TagDropdown component -->
